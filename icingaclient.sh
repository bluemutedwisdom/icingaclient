#!/bin/bash

function usage () {
	printf \
"usage: icingaclient [client_fqdn] [client_address] [parent_fqdn] \n
                     [parent_address] [parent_zone]"
}

function checkParam() {
	local param="$1"

	if [ -z "$param" ] ; then
		usage
		exit
	fi
}

function setParam() {
	local param="$1"
	local name="$2"

	if [ -z "$param" ] ; then
		read -p "Enter the ${name}:  " param
	fi	

	echo "$param"
}

function createClientCert() {
	local client="$1"
	local clientkey="${client}.key"
	local clientcsr="${client}.csr"
	local clientcert="${client}.crt"

	# Generate client's SSL key and csr.
	icinga2 pki new-cert \
		--cn $client \
		--key $clientkey \
		--csr $clientcsr
	
	# Sign the client cert
	icinga2 pki sign-csr \
		--csr $clientcsr \
		--cert $clientcert
}

# Check params
if [ ! -z "$1" ] ; then
	checkParam "$2"
	checkParam "$3"
	checkParam "$4"
	checkParam "$5"
fi

client_name=$(setParam "$1" "fqdn of the client")
client_ip=$(setParam "$2" "client IP")
parent_name=$(setParam "$3" "fqdn of the parent")
parent_ip=$(setParam "$4" "parent IP")
parent_zone=$(setParam "$5" "zone name of the parent")

server_zones_file="/etc/icinga2/zones.d/${parent_zone}/${client_name}.conf"


if [ -f "${server_zones_file}" ]; then 
	echo "Client zones file ($server_zones_file) exists. Exiting..."
	exit 1
fi

if icinga2 object list --type Host --name "$client_name" | grep --quiet "$client_name" ; then
	echo "Existing host client name found:"
	icinga2 object list --type Host --name "$client_name"
	exit 1
fi 

WORKING_DIR=`mktemp -d`
CLIENT_OUT_DIR="/etc/icinga2/scripts/clients/"
# Create the exe client output directory if it does not exist already.
if [ ! -d "$CLIENT_OUT_DIR" ]; then 
        mkdir "$CLIENT_OUT_DIR"
fi

# Generate client Icinga node configuration.
echo "
/* Generated by icingaclient(1). */

object Endpoint \"${client_name}\" {
        host = \"${client_ip}\"
       	port = \"5665\"
}

object Zone \"${client_name}\" {
        endpoints = [ \"${client_name}\" ]
       	parent = \"${parent_zone}\"
}

object Host \"${client_name}\" {
        import \"generic-host\"
        address = \"${client_ip}\"
        vars.os = \"windows\"
        vars.client_endpoint = name
}
" >> "${server_zones_file}"

# Now we build the client

# Gather all the templates
chown nagios:nagios ${WORKING_DIR}
chmod 770 ${WORKING_DIR}
cp "/etc/icinga2/pki/ca.crt" "${WORKING_DIR}/"
cp -R /etc/icinga2/scripts/files/* "${WORKING_DIR}/"
cd "${WORKING_DIR}/"

# Replace vars in all client files
sed -e "s/%%CLIENT_NAME%%/${client_name}/g" \
    -e "s/%%CLIENT_IP%%/${client_ip}/g" \
    -e "s/%%PARENT_NAME%%/${parent_name}/g" \
    -e "s/%%PARENT_IP%%/${parent_ip}/g" \
    -e "s/%%PARENT_ZONE%%/${parent_zone}/g" \
    -i *

# Generate and sign the client certificate.
createClientCert "${client_name}"

# Compile windows client
makensis  -DPARENT_NAME="${parent_name}" \
          -DCLIENT_NAME="${client_name}" \
          "icinga2-setup-windows-child.nsis"

cp "icinga2_${client_name}.exe" $CLIENT_OUT_DIR
	
echo "Cleaning up $WORKING_DIR"
rm -rf $WORKING_DIR

printf \
"Client created in $CLIENT_OUT_DIR. \n
Restart icinga2 to load the new configuration."
